; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	antlr3MTNExceptionNew
PUBLIC	antlr3TreeParserNewStream
PUBLIC	??_C@_0CO@BHFJHLHM@org?4antlr?4runtime?4MismatchedTree@ ; `string'
PUBLIC	??_C@_09MLMDPBIO@?$DMmissing?5?$AA@		; `string'
PUBLIC	??_C@_01PPODPGHN@?$DO?$AA@			; `string'
EXTRN	__imp_free:PROC
EXTRN	__imp_malloc:PROC
EXTRN	antlr3BaseRecognizerNew:PROC
EXTRN	antlr3RecognitionExceptionNew:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$antlr3MTNExceptionNew DD imagerel $LN3
	DD	imagerel $LN3+89
	DD	imagerel $unwind$antlr3MTNExceptionNew
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$antlr3TreeParserNewStream DD imagerel $LN5
	DD	imagerel $LN5+328
	DD	imagerel $unwind$antlr3TreeParserNewStream
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$mismatch DD imagerel mismatch
	DD	imagerel mismatch+86
	DD	imagerel $unwind$mismatch
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$setTreeNodeStream DD imagerel setTreeNodeStream
	DD	imagerel setTreeNodeStream+103
	DD	imagerel $unwind$setTreeNodeStream
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$getTreeNodeStream DD imagerel getTreeNodeStream
	DD	imagerel getTreeNodeStream+17
	DD	imagerel $unwind$getTreeNodeStream
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$freeParser DD imagerel freeParser
	DD	imagerel freeParser+204
	DD	imagerel $unwind$freeParser
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$getCurrentInputSymbol DD imagerel getCurrentInputSymbol
	DD	imagerel getCurrentInputSymbol+86
	DD	imagerel $unwind$getCurrentInputSymbol
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$getMissingSymbol DD imagerel getMissingSymbol
	DD	imagerel getMissingSymbol+356
	DD	imagerel $unwind$getMissingSymbol
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_01PPODPGHN@?$DO?$AA@
CONST	SEGMENT
??_C@_01PPODPGHN@?$DO?$AA@ DB '>', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09MLMDPBIO@?$DMmissing?5?$AA@
CONST	SEGMENT
??_C@_09MLMDPBIO@?$DMmissing?5?$AA@ DB '<missing ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@BHFJHLHM@org?4antlr?4runtime?4MismatchedTree@
CONST	SEGMENT
??_C@_0CO@BHFJHLHM@org?4antlr?4runtime?4MismatchedTree@ DB 'org.antlr.run'
	DB	'time.MismatchedTreeNodeException', 00H	; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$getMissingSymbol DD 022d01H
	DD	07015b219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$getCurrentInputSymbol DD 022301H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$freeParser DD 021e01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$getTreeNodeStream DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$setTreeNodeStream DD 022301H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mismatch DD 022701H
	DD	0700f3213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$antlr3TreeParserNewStream DD 022601H
	DD	0700f5213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$antlr3MTNExceptionNew DD 021e01H
	DD	07006320aH
xdata	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\oss\third_party\antlr\libantlr3c-3.4\src\antlr3treeparser.c
;	COMDAT getMissingSymbol
_TEXT	SEGMENT
tns$ = 32
ctns$ = 40
node$ = 48
current$ = 56
token$ = 64
text$ = 72
i$ = 80
tv83 = 84
recognizer$ = 112
istream$ = 120
e$ = 128
expectedTokenType$ = 136
follow$ = 144
getMissingSymbol PROC					; COMDAT

; 206  : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 207  : 	pANTLR3_TREE_NODE_STREAM		tns;
; 208  :     pANTLR3_COMMON_TREE_NODE_STREAM	ctns;
; 209  : 	pANTLR3_BASE_TREE				node;
; 210  : 	pANTLR3_BASE_TREE				current;
; 211  : 	pANTLR3_COMMON_TOKEN			token;
; 212  : 	pANTLR3_STRING					text;
; 213  :     ANTLR3_INT32                   i;
; 214  : 
; 215  : 	// Dereference the standard pointers
; 216  : 	//
; 217  :     tns	    = (pANTLR3_TREE_NODE_STREAM)(istream->super);

  0002d	48 8b 44 24 78	 mov	 rax, QWORD PTR istream$[rsp]
  00032	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00036	48 89 44 24 20	 mov	 QWORD PTR tns$[rsp], rax

; 218  :     ctns    = tns->ctns;

  0003b	48 8b 44 24 20	 mov	 rax, QWORD PTR tns$[rsp]
  00040	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00043	48 89 44 24 28	 mov	 QWORD PTR ctns$[rsp], rax

; 219  :     
; 220  : 	// Create a new empty node, by stealing the current one, or the previous one if the current one is EOF
; 221  : 	//
; 222  : 	current	= tns->_LT(tns, 1);

  00048	ba 01 00 00 00	 mov	 edx, 1
  0004d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tns$[rsp]
  00052	48 8b 44 24 20	 mov	 rax, QWORD PTR tns$[rsp]
  00057	ff 50 10	 call	 QWORD PTR [rax+16]
  0005a	48 89 44 24 38	 mov	 QWORD PTR current$[rsp], rax

; 223  :     i       = -1;

  0005f	c7 44 24 50 ff
	ff ff ff	 mov	 DWORD PTR i$[rsp], -1

; 224  : 
; 225  : 	if	(current == &ctns->EOF_NODE.baseTree)

  00067	48 8b 44 24 28	 mov	 rax, QWORD PTR ctns$[rsp]
  0006c	48 05 c0 02 00
	00		 add	 rax, 704		; 000002c0H
  00072	48 39 44 24 38	 cmp	 QWORD PTR current$[rsp], rax
  00077	75 21		 jne	 SHORT $LN4@getMissing

; 226  : 	{
; 227  : 		current = tns->_LT(tns, -1);

  00079	ba ff ff ff ff	 mov	 edx, -1
  0007e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tns$[rsp]
  00083	48 8b 44 24 20	 mov	 rax, QWORD PTR tns$[rsp]
  00088	ff 50 10	 call	 QWORD PTR [rax+16]
  0008b	48 89 44 24 38	 mov	 QWORD PTR current$[rsp], rax

; 228  :         i--;

  00090	8b 44 24 50	 mov	 eax, DWORD PTR i$[rsp]
  00094	ff c8		 dec	 eax
  00096	89 44 24 50	 mov	 DWORD PTR i$[rsp], eax
$LN4@getMissing:
$LN2@getMissing:

; 229  : 	}
; 230  :     while (((pANTLR3_COMMON_TREE)(current->super))->factory == NULL)

  0009a	48 8b 44 24 38	 mov	 rax, QWORD PTR current$[rsp]
  0009f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000a2	48 83 78 30 00	 cmp	 QWORD PTR [rax+48], 0
  000a7	75 2a		 jne	 SHORT $LN3@getMissing

; 231  : 	{
; 232  : 		current = tns->_LT(tns, i--);

  000a9	8b 44 24 50	 mov	 eax, DWORD PTR i$[rsp]
  000ad	89 44 24 54	 mov	 DWORD PTR tv83[rsp], eax
  000b1	8b 44 24 50	 mov	 eax, DWORD PTR i$[rsp]
  000b5	ff c8		 dec	 eax
  000b7	89 44 24 50	 mov	 DWORD PTR i$[rsp], eax
  000bb	8b 54 24 54	 mov	 edx, DWORD PTR tv83[rsp]
  000bf	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tns$[rsp]
  000c4	48 8b 44 24 20	 mov	 rax, QWORD PTR tns$[rsp]
  000c9	ff 50 10	 call	 QWORD PTR [rax+16]
  000cc	48 89 44 24 38	 mov	 QWORD PTR current$[rsp], rax

; 233  :     }

  000d1	eb c7		 jmp	 SHORT $LN2@getMissing
$LN3@getMissing:

; 234  : 
; 235  : 	node	= current->dupNode(current);

  000d3	48 8b 4c 24 38	 mov	 rcx, QWORD PTR current$[rsp]
  000d8	48 8b 44 24 38	 mov	 rax, QWORD PTR current$[rsp]
  000dd	ff 50 58	 call	 QWORD PTR [rax+88]
  000e0	48 89 44 24 30	 mov	 QWORD PTR node$[rsp], rax

; 236  : 
; 237  : 	// Find the newly dupicated token
; 238  : 	//
; 239  : 	token	= node->getToken(node);

  000e5	48 8b 4c 24 30	 mov	 rcx, QWORD PTR node$[rsp]
  000ea	48 8b 44 24 30	 mov	 rax, QWORD PTR node$[rsp]
  000ef	ff 50 28	 call	 QWORD PTR [rax+40]
  000f2	48 89 44 24 40	 mov	 QWORD PTR token$[rsp], rax

; 240  : 
; 241  : 	// Create the token text that shows it has been inserted
; 242  : 	//
; 243  : 	token->setText8			(token, (pANTLR3_UINT8)"<missing ");

  000f7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09MLMDPBIO@?$DMmissing?5?$AA@
  000fe	48 8b 4c 24 40	 mov	 rcx, QWORD PTR token$[rsp]
  00103	48 8b 44 24 40	 mov	 rax, QWORD PTR token$[rsp]
  00108	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]

; 244  : 	text = token->getText	(token);

  0010e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR token$[rsp]
  00113	48 8b 44 24 40	 mov	 rax, QWORD PTR token$[rsp]
  00118	ff 50 78	 call	 QWORD PTR [rax+120]
  0011b	48 89 44 24 48	 mov	 QWORD PTR text$[rsp], rax

; 245  : 	text->append8			(text, (const char *)recognizer->state->tokenNames[expectedTokenType]);

  00120	48 8b 44 24 70	 mov	 rax, QWORD PTR recognizer$[rsp]
  00125	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00129	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR expectedTokenType$[rsp]
  00130	48 8b 40 48	 mov	 rax, QWORD PTR [rax+72]
  00134	48 8b 14 c8	 mov	 rdx, QWORD PTR [rax+rcx*8]
  00138	48 8b 4c 24 48	 mov	 rcx, QWORD PTR text$[rsp]
  0013d	48 8b 44 24 48	 mov	 rax, QWORD PTR text$[rsp]
  00142	ff 50 38	 call	 QWORD PTR [rax+56]

; 246  : 	text->append8			(text, (const char *)">");

  00145	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01PPODPGHN@?$DO?$AA@
  0014c	48 8b 4c 24 48	 mov	 rcx, QWORD PTR text$[rsp]
  00151	48 8b 44 24 48	 mov	 rax, QWORD PTR text$[rsp]
  00156	ff 50 38	 call	 QWORD PTR [rax+56]

; 247  : 	
; 248  : 	// Finally return the pointer to our new node
; 249  : 	//
; 250  : 	return	node;

  00159	48 8b 44 24 30	 mov	 rax, QWORD PTR node$[rsp]

; 251  : }

  0015e	48 83 c4 60	 add	 rsp, 96			; 00000060H
  00162	5f		 pop	 rdi
  00163	c3		 ret	 0
getMissingSymbol ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\oss\third_party\antlr\libantlr3c-3.4\src\antlr3treeparser.c
;	COMDAT getCurrentInputSymbol
_TEXT	SEGMENT
tns$ = 32
ctns$ = 40
recognizer$ = 64
istream$ = 72
getCurrentInputSymbol PROC				; COMDAT

; 190  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 0c 00 00 00	 mov	 ecx, 12
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 191  : 	pANTLR3_TREE_NODE_STREAM		tns;
; 192  :     pANTLR3_COMMON_TREE_NODE_STREAM	ctns;
; 193  : 
; 194  :     tns	    = (pANTLR3_TREE_NODE_STREAM)(istream->super);

  00023	48 8b 44 24 48	 mov	 rax, QWORD PTR istream$[rsp]
  00028	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0002c	48 89 44 24 20	 mov	 QWORD PTR tns$[rsp], rax

; 195  :     ctns    = tns->ctns;

  00031	48 8b 44 24 20	 mov	 rax, QWORD PTR tns$[rsp]
  00036	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00039	48 89 44 24 28	 mov	 QWORD PTR ctns$[rsp], rax

; 196  : 	return tns->_LT(tns, 1);

  0003e	ba 01 00 00 00	 mov	 edx, 1
  00043	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tns$[rsp]
  00048	48 8b 44 24 20	 mov	 rax, QWORD PTR tns$[rsp]
  0004d	ff 50 10	 call	 QWORD PTR [rax+16]

; 197  : }

  00050	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00054	5f		 pop	 rdi
  00055	c3		 ret	 0
getCurrentInputSymbol ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\oss\third_party\antlr\libantlr3c-3.4\src\antlr3treeparser.c
;	COMDAT freeParser
_TEXT	SEGMENT
tv93 = 32
parser$ = 64
freeParser PROC						; COMDAT

; 128  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 0c 00 00 00	 mov	 ecx, 12
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 129  : 	if	(parser->rec != NULL)

  0001e	48 8b 44 24 40	 mov	 rax, QWORD PTR parser$[rsp]
  00023	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00028	0f 84 8d 00 00
	00		 je	 $LN2@freeParser

; 130  : 	{
; 131  : 		// This may have ben a delegate or delegator parser, in which case the
; 132  : 		// state may already have been freed (and set to NULL therefore)
; 133  : 		// so we ignore the state if we don't have it.
; 134  : 		//
; 135  : 		if	(parser->rec->state != NULL)

  0002e	48 8b 44 24 40	 mov	 rax, QWORD PTR parser$[rsp]
  00033	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00037	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  0003c	74 58		 je	 SHORT $LN3@freeParser

; 136  : 		{
; 137  : 			if	(parser->rec->state->following != NULL)

  0003e	48 8b 44 24 40	 mov	 rax, QWORD PTR parser$[rsp]
  00043	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00047	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0004b	48 83 78 18 00	 cmp	 QWORD PTR [rax+24], 0
  00050	74 44		 je	 SHORT $LN4@freeParser

; 138  : 			{
; 139  : 				parser->rec->state->following->free(parser->rec->state->following);

  00052	48 8b 44 24 40	 mov	 rax, QWORD PTR parser$[rsp]
  00057	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0005b	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0005f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR parser$[rsp]
  00064	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00068	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  0006c	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  00070	48 89 4c 24 20	 mov	 QWORD PTR tv93[rsp], rcx
  00075	48 8b 48 18	 mov	 rcx, QWORD PTR [rax+24]
  00079	48 8b 44 24 20	 mov	 rax, QWORD PTR tv93[rsp]
  0007e	ff 50 10	 call	 QWORD PTR [rax+16]

; 140  : 				parser->rec->state->following = NULL;

  00081	48 8b 44 24 40	 mov	 rax, QWORD PTR parser$[rsp]
  00086	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0008a	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0008e	48 c7 40 18 00
	00 00 00	 mov	 QWORD PTR [rax+24], 0
$LN4@freeParser:
$LN3@freeParser:

; 141  : 			}
; 142  : 		}
; 143  : 	    parser->rec->free(parser->rec);

  00096	48 8b 44 24 40	 mov	 rax, QWORD PTR parser$[rsp]
  0009b	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0009f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR parser$[rsp]
  000a4	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000a8	ff 90 20 01 00
	00		 call	 QWORD PTR [rax+288]

; 144  : 	    parser->rec	= NULL;

  000ae	48 8b 44 24 40	 mov	 rax, QWORD PTR parser$[rsp]
  000b3	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
$LN2@freeParser:

; 145  :     }
; 146  : 
; 147  :     ANTLR3_FREE(parser);

  000bb	48 8b 4c 24 40	 mov	 rcx, QWORD PTR parser$[rsp]
  000c0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 148  : }

  000c6	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000ca	5f		 pop	 rdi
  000cb	c3		 ret	 0
freeParser ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\oss\third_party\antlr\libantlr3c-3.4\src\antlr3treeparser.c
;	COMDAT getTreeNodeStream
_TEXT	SEGMENT
parser$ = 16
getTreeNodeStream PROC					; COMDAT

; 164  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 165  :     return  parser->ctnstream;

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR parser$[rsp]
  0000b	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]

; 166  : }

  0000f	5f		 pop	 rdi
  00010	c3		 ret	 0
getTreeNodeStream ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\oss\third_party\antlr\libantlr3c-3.4\src\antlr3treeparser.c
;	COMDAT setTreeNodeStream
_TEXT	SEGMENT
parser$ = 48
input$ = 56
setTreeNodeStream PROC					; COMDAT

; 154  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 155  :     parser->ctnstream = input;

  00023	48 8b 44 24 30	 mov	 rax, QWORD PTR parser$[rsp]
  00028	48 8b 4c 24 38	 mov	 rcx, QWORD PTR input$[rsp]
  0002d	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 156  :     parser->rec->reset		(parser->rec);

  00031	48 8b 44 24 30	 mov	 rax, QWORD PTR parser$[rsp]
  00036	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0003a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR parser$[rsp]
  0003f	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00043	ff 90 18 01 00
	00		 call	 QWORD PTR [rax+280]

; 157  :     parser->ctnstream->reset	(parser->ctnstream);

  00049	48 8b 44 24 30	 mov	 rax, QWORD PTR parser$[rsp]
  0004e	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00052	48 8b 4c 24 30	 mov	 rcx, QWORD PTR parser$[rsp]
  00057	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  0005b	ff 90 d8 05 00
	00		 call	 QWORD PTR [rax+1496]

; 158  : }

  00061	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00065	5f		 pop	 rdi
  00066	c3		 ret	 0
setTreeNodeStream ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\oss\third_party\antlr\libantlr3c-3.4\src\antlr3treeparser.c
;	COMDAT mismatch
_TEXT	SEGMENT
recognizer$ = 48
ttype$ = 56
follow$ = 64
mismatch PROC						; COMDAT

; 175  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	57		 push	 rdi
  0000f	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 08 00 00 00	 mov	 ecx, 8
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 176  :     recognizer->exConstruct(recognizer);

  00027	48 8b 4c 24 30	 mov	 rcx, QWORD PTR recognizer$[rsp]
  0002c	48 8b 44 24 30	 mov	 rax, QWORD PTR recognizer$[rsp]
  00031	ff 90 10 01 00
	00		 call	 QWORD PTR [rax+272]

; 177  :     recognizer->recoverFromMismatchedToken(recognizer, ttype, follow);

  00037	4c 8b 44 24 40	 mov	 r8, QWORD PTR follow$[rsp]
  0003c	8b 54 24 38	 mov	 edx, DWORD PTR ttype$[rsp]
  00040	48 8b 4c 24 30	 mov	 rcx, QWORD PTR recognizer$[rsp]
  00045	48 8b 44 24 30	 mov	 rax, QWORD PTR recognizer$[rsp]
  0004a	ff 90 a0 00 00
	00		 call	 QWORD PTR [rax+160]

; 178  : }

  00050	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00054	5f		 pop	 rdi
  00055	c3		 ret	 0
mismatch ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\oss\third_party\antlr\libantlr3c-3.4\src\antlr3treeparser.c
;	COMDAT antlr3TreeParserNewStream
_TEXT	SEGMENT
parser$ = 32
sizeHint$ = 64
ctnstream$ = 72
state$ = 80
antlr3TreeParserNewStream PROC				; COMDAT

; 53   : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	57		 push	 rdi
  0000f	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 0c 00 00 00	 mov	 ecx, 12
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	8b 4c 24 40	 mov	 ecx, DWORD PTR [rsp+64]

; 54   : 	pANTLR3_TREE_PARSER	    parser;
; 55   : 
; 56   : 	/** Allocate tree parser memory
; 57   : 	*/
; 58   : 	parser  =(pANTLR3_TREE_PARSER) ANTLR3_MALLOC(sizeof(ANTLR3_TREE_PARSER));

  00026	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  0002b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00031	48 89 44 24 20	 mov	 QWORD PTR parser$[rsp], rax

; 59   : 
; 60   : 	if	(parser == NULL)

  00036	48 83 7c 24 20
	00		 cmp	 QWORD PTR parser$[rsp], 0
  0003c	75 07		 jne	 SHORT $LN2@antlr3Tree

; 61   : 	{
; 62   : 		return	NULL;

  0003e	33 c0		 xor	 eax, eax
  00040	e9 fd 00 00 00	 jmp	 $LN1@antlr3Tree
$LN2@antlr3Tree:

; 63   : 	}
; 64   : 
; 65   : 	/* Create and install a base recognizer which does most of the work for us
; 66   : 	*/
; 67   : 	parser->rec =  antlr3BaseRecognizerNew(ANTLR3_TYPE_PARSER, sizeHint, state);

  00045	4c 8b 44 24 50	 mov	 r8, QWORD PTR state$[rsp]
  0004a	8b 54 24 40	 mov	 edx, DWORD PTR sizeHint$[rsp]
  0004e	b9 02 00 00 00	 mov	 ecx, 2
  00053	e8 00 00 00 00	 call	 antlr3BaseRecognizerNew
  00058	48 8b 4c 24 20	 mov	 rcx, QWORD PTR parser$[rsp]
  0005d	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 68   : 
; 69   : 	if	(parser->rec == NULL)

  00061	48 8b 44 24 20	 mov	 rax, QWORD PTR parser$[rsp]
  00066	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  0006b	75 14		 jne	 SHORT $LN3@antlr3Tree

; 70   : 	{
; 71   : 		parser->free(parser);

  0006d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR parser$[rsp]
  00072	48 8b 44 24 20	 mov	 rax, QWORD PTR parser$[rsp]
  00077	ff 50 28	 call	 QWORD PTR [rax+40]

; 72   : 		return	NULL;

  0007a	33 c0		 xor	 eax, eax
  0007c	e9 c1 00 00 00	 jmp	 $LN1@antlr3Tree
$LN3@antlr3Tree:

; 73   : 	}
; 74   : 
; 75   : 	/* Ensure we can track back to the tree parser super structure
; 76   : 	* from the base recognizer structure
; 77   : 	*/
; 78   : 	parser->rec->super	= parser;

  00081	48 8b 44 24 20	 mov	 rax, QWORD PTR parser$[rsp]
  00086	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0008a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR parser$[rsp]
  0008f	48 89 08	 mov	 QWORD PTR [rax], rcx

; 79   : 	parser->rec->type	= ANTLR3_TYPE_TREE_PARSER;

  00092	48 8b 44 24 20	 mov	 rax, QWORD PTR parser$[rsp]
  00097	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0009b	c7 40 08 04 00
	00 00		 mov	 DWORD PTR [rax+8], 4

; 80   : 
; 81   : 	/* Install our base recognizer overrides
; 82   : 	*/
; 83   : 	parser->rec->mismatch				= mismatch;

  000a2	48 8b 44 24 20	 mov	 rax, QWORD PTR parser$[rsp]
  000a7	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:mismatch
  000b2	48 89 48 40	 mov	 QWORD PTR [rax+64], rcx

; 84   : 	parser->rec->exConstruct			= antlr3MTNExceptionNew;

  000b6	48 8b 44 24 20	 mov	 rax, QWORD PTR parser$[rsp]
  000bb	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:antlr3MTNExceptionNew
  000c6	48 89 88 10 01
	00 00		 mov	 QWORD PTR [rax+272], rcx

; 85   : 	parser->rec->getCurrentInputSymbol	= getCurrentInputSymbol;

  000cd	48 8b 44 24 20	 mov	 rax, QWORD PTR parser$[rsp]
  000d2	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000d6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:getCurrentInputSymbol
  000dd	48 89 88 f8 00
	00 00		 mov	 QWORD PTR [rax+248], rcx

; 86   : 	parser->rec->getMissingSymbol		= getMissingSymbol;

  000e4	48 8b 44 24 20	 mov	 rax, QWORD PTR parser$[rsp]
  000e9	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000ed	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:getMissingSymbol
  000f4	48 89 88 00 01
	00 00		 mov	 QWORD PTR [rax+256], rcx

; 87   : 
; 88   : 	/* Install tree parser API
; 89   : 	*/
; 90   : 	parser->getTreeNodeStream	=  getTreeNodeStream;

  000fb	48 8b 44 24 20	 mov	 rax, QWORD PTR parser$[rsp]
  00100	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:getTreeNodeStream
  00107	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx

; 91   : 	parser->setTreeNodeStream	=  setTreeNodeStream;

  0010b	48 8b 44 24 20	 mov	 rax, QWORD PTR parser$[rsp]
  00110	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:setTreeNodeStream
  00117	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 92   : 	parser->free		=  freeParser;

  0011b	48 8b 44 24 20	 mov	 rax, QWORD PTR parser$[rsp]
  00120	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:freeParser
  00127	48 89 48 28	 mov	 QWORD PTR [rax+40], rcx

; 93   : 
; 94   : 	/* Install the tree node stream
; 95   : 	*/
; 96   : 	parser->setTreeNodeStream(parser, ctnstream);

  0012b	48 8b 54 24 48	 mov	 rdx, QWORD PTR ctnstream$[rsp]
  00130	48 8b 4c 24 20	 mov	 rcx, QWORD PTR parser$[rsp]
  00135	48 8b 44 24 20	 mov	 rax, QWORD PTR parser$[rsp]
  0013a	ff 50 18	 call	 QWORD PTR [rax+24]

; 97   : 
; 98   : 	return  parser;

  0013d	48 8b 44 24 20	 mov	 rax, QWORD PTR parser$[rsp]
$LN1@antlr3Tree:

; 99   : }

  00142	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00146	5f		 pop	 rdi
  00147	c3		 ret	 0
antlr3TreeParserNewStream ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\oss\third_party\antlr\libantlr3c-3.4\src\antlr3treeparser.c
;	COMDAT antlr3MTNExceptionNew
_TEXT	SEGMENT
recognizer$ = 48
antlr3MTNExceptionNew PROC				; COMDAT

; 112  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 113  :     /* Create a basic recognition exception structure
; 114  :      */
; 115  :     antlr3RecognitionExceptionNew(recognizer);

  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR recognizer$[rsp]
  00023	e8 00 00 00 00	 call	 antlr3RecognitionExceptionNew

; 116  : 
; 117  :     /* Now update it to indicate this is a Mismatched token exception
; 118  :      */
; 119  :     recognizer->state->exception->name		= ANTLR3_MISMATCHED_TREE_NODE_NAME;

  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR recognizer$[rsp]
  0002d	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00031	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@BHFJHLHM@org?4antlr?4runtime?4MismatchedTree@
  0003c	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 120  :     recognizer->state->exception->type		= ANTLR3_MISMATCHED_TREE_NODE_EXCEPTION;

  00040	48 8b 44 24 30	 mov	 rax, QWORD PTR recognizer$[rsp]
  00045	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00049	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0004d	c7 00 07 00 00
	00		 mov	 DWORD PTR [rax], 7

; 121  : 
; 122  :     return;
; 123  : }

  00053	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00057	5f		 pop	 rdi
  00058	c3		 ret	 0
antlr3MTNExceptionNew ENDP
_TEXT	ENDS
END
