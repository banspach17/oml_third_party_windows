; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	antlr3CommonTreeNew
PUBLIC	antlr3CommonTreeNewFromToken
PUBLIC	antlr3ArboretumNew
PUBLIC	antlr3SetCTAPI
PUBLIC	??_C@_03ILAMHENH@nil?$AA@			; `string'
EXTRN	__imp_calloc:PROC
EXTRN	__imp_free:PROC
EXTRN	__imp_malloc:PROC
EXTRN	__imp_realloc:PROC
EXTRN	antlr3VectorFactoryNew:PROC
EXTRN	antlr3StackNew:PROC
EXTRN	antlr3BaseTreeNew:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$antlr3CommonTreeNew DD imagerel $LN4
	DD	imagerel $LN4+75
	DD	imagerel $unwind$antlr3CommonTreeNew
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$antlr3CommonTreeNewFromToken DD imagerel $LN4
	DD	imagerel $LN4+77
	DD	imagerel $unwind$antlr3CommonTreeNewFromToken
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$antlr3ArboretumNew DD imagerel $LN5
	DD	imagerel $LN5+298
	DD	imagerel $unwind$antlr3ArboretumNew
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$antlr3SetCTAPI DD imagerel $LN3
	DD	imagerel $LN3+452
	DD	imagerel $unwind$antlr3SetCTAPI
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$getToken DD imagerel getToken
	DD	imagerel getToken+20
	DD	imagerel $unwind$getToken
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$dupNode DD imagerel dupNode
	DD	imagerel dupNode+78
	DD	imagerel $unwind$dupNode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$isNilNode DD imagerel isNilNode
	DD	imagerel isNilNode+31
	DD	imagerel $unwind$isNilNode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$getType DD imagerel getType
	DD	imagerel getType+91
	DD	imagerel $unwind$getType
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$getText DD imagerel getText
	DD	imagerel getText+52
	DD	imagerel $unwind$getText
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$getLine DD imagerel getLine
	DD	imagerel getLine+169
	DD	imagerel $unwind$getLine
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$getCharPositionInLine DD imagerel getCharPositionInLine
	DD	imagerel getCharPositionInLine+157
	DD	imagerel $unwind$getCharPositionInLine
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$toString DD imagerel toString
	DD	imagerel toString+143
	DD	imagerel $unwind$toString
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$getParent DD imagerel getParent
	DD	imagerel getParent+24
	DD	imagerel $unwind$getParent
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$setParent DD imagerel setParent
	DD	imagerel setParent+91
	DD	imagerel $unwind$setParent
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$setChildIndex DD imagerel setChildIndex
	DD	imagerel setChildIndex+27
	DD	imagerel $unwind$setChildIndex
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$getChildIndex DD imagerel getChildIndex
	DD	imagerel getChildIndex+19
	DD	imagerel $unwind$getChildIndex
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$createChildrenList DD imagerel createChildrenList
	DD	imagerel createChildrenList+99
	DD	imagerel $unwind$createChildrenList
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$reuse DD	imagerel reuse
	DD	imagerel reuse+150
	DD	imagerel $unwind$reuse
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$newPool DD imagerel newPool
	DD	imagerel newPool+140
	DD	imagerel $unwind$newPool
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$newPoolTree DD imagerel newPoolTree
	DD	imagerel newPoolTree+264
	DD	imagerel $unwind$newPoolTree
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$newFromTree DD imagerel newFromTree
	DD	imagerel newFromTree+118
	DD	imagerel $unwind$newFromTree
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$newFromToken DD imagerel newFromToken
	DD	imagerel newFromToken+96
	DD	imagerel $unwind$newFromToken
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$factoryClose DD imagerel factoryClose
	DD	imagerel factoryClose+213
	DD	imagerel $unwind$factoryClose
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_03ILAMHENH@nil?$AA@
CONST	SEGMENT
??_C@_03ILAMHENH@nil?$AA@ DB 'nil', 00H			; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$factoryClose DD 021e01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$newFromToken DD 022301H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$newFromTree DD 022301H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$newPoolTree DD 021e01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$newPool DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$reuse DD 021e01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$createChildrenList DD 021e01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$getChildIndex DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$setChildIndex DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$setParent DD 022301H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$getParent DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$toString DD 021e01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$getCharPositionInLine DD 021e01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$getLine DD 021e01H
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$getText DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$getType DD 021e01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$isNilNode DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dupNode DD 021e01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$getToken DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$antlr3SetCTAPI DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$antlr3ArboretumNew DD 021e01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$antlr3CommonTreeNewFromToken DD 021e01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$antlr3CommonTreeNew DD 021501H
	DD	070025206H
xdata	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\oss\third_party\antlr\libantlr3c-3.4\src\antlr3commontree.c
;	COMDAT factoryClose
_TEXT	SEGMENT
poolCount$ = 32
factory$ = 64
factoryClose PROC					; COMDAT

; 253  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 0c 00 00 00	 mov	 ecx, 12
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 254  : 	ANTLR3_INT32	    poolCount;
; 255  : 
; 256  : 	// First close the vector factory that supplied all the child pointer
; 257  : 	// vectors.
; 258  : 	//
; 259  : 	factory->vFactory->close(factory->vFactory);

  0001e	48 8b 44 24 40	 mov	 rax, QWORD PTR factory$[rsp]
  00023	48 8b 80 48 01
	00 00		 mov	 rax, QWORD PTR [rax+328]
  0002a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR factory$[rsp]
  0002f	48 8b 89 48 01
	00 00		 mov	 rcx, QWORD PTR [rcx+328]
  00036	ff 90 78 01 00
	00		 call	 QWORD PTR [rax+376]

; 260  : 
; 261  :     if  (factory->nilStack !=  NULL)

  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR factory$[rsp]
  00041	48 83 b8 50 01
	00 00 00	 cmp	 QWORD PTR [rax+336], 0
  00049	74 1b		 je	 SHORT $LN5@factoryClo

; 262  :     {
; 263  :         factory->nilStack->free(factory->nilStack);

  0004b	48 8b 44 24 40	 mov	 rax, QWORD PTR factory$[rsp]
  00050	48 8b 80 50 01
	00 00		 mov	 rax, QWORD PTR [rax+336]
  00057	48 8b 4c 24 40	 mov	 rcx, QWORD PTR factory$[rsp]
  0005c	48 8b 89 50 01
	00 00		 mov	 rcx, QWORD PTR [rcx+336]
  00063	ff 50 10	 call	 QWORD PTR [rax+16]
$LN5@factoryClo:

; 264  :     }
; 265  : 
; 266  : 	// We now JUST free the pools because the C runtime CommonToken based tree
; 267  : 	// cannot contain anything that was not made by this factory.
; 268  : 	//
; 269  : 	for	(poolCount = 0; poolCount <= factory->thisPool; poolCount++)

  00066	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR poolCount$[rsp], 0
  0006e	eb 0a		 jmp	 SHORT $LN4@factoryClo
$LN2@factoryClo:
  00070	8b 44 24 20	 mov	 eax, DWORD PTR poolCount$[rsp]
  00074	ff c0		 inc	 eax
  00076	89 44 24 20	 mov	 DWORD PTR poolCount$[rsp], eax
$LN4@factoryClo:
  0007a	48 8b 44 24 40	 mov	 rax, QWORD PTR factory$[rsp]
  0007f	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00082	39 44 24 20	 cmp	 DWORD PTR poolCount$[rsp], eax
  00086	7f 2e		 jg	 SHORT $LN3@factoryClo

; 270  : 	{
; 271  : 		// We can now free this pool allocation
; 272  : 		//
; 273  : 		ANTLR3_FREE(factory->pools[poolCount]);

  00088	48 63 44 24 20	 movsxd	 rax, DWORD PTR poolCount$[rsp]
  0008d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR factory$[rsp]
  00092	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00095	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  00099	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 274  : 		factory->pools[poolCount] = NULL;

  0009f	48 63 44 24 20	 movsxd	 rax, DWORD PTR poolCount$[rsp]
  000a4	48 8b 4c 24 40	 mov	 rcx, QWORD PTR factory$[rsp]
  000a9	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000ac	48 c7 04 c1 00
	00 00 00	 mov	 QWORD PTR [rcx+rax*8], 0

; 275  : 	}

  000b4	eb ba		 jmp	 SHORT $LN2@factoryClo
$LN3@factoryClo:

; 276  : 
; 277  : 	// All the pools are deallocated we can free the pointers to the pools
; 278  : 	// now.
; 279  : 	//
; 280  : 	ANTLR3_FREE(factory->pools);

  000b6	48 8b 44 24 40	 mov	 rax, QWORD PTR factory$[rsp]
  000bb	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  000be	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 281  : 
; 282  : 	// Finally, we can free the space for the factory itself
; 283  : 	//
; 284  : 	ANTLR3_FREE(factory);

  000c4	48 8b 4c 24 40	 mov	 rcx, QWORD PTR factory$[rsp]
  000c9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 285  : }

  000cf	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000d3	5f		 pop	 rdi
  000d4	c3		 ret	 0
factoryClose ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\oss\third_party\antlr\libantlr3c-3.4\src\antlr3commontree.c
;	COMDAT newFromToken
_TEXT	SEGMENT
newTree$ = 32
factory$ = 64
token$ = 72
newFromToken PROC					; COMDAT

; 234  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 0c 00 00 00	 mov	 ecx, 12
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 235  : 	pANTLR3_BASE_TREE	newTree;
; 236  : 
; 237  : 	newTree = factory->newTree(factory);

  00023	48 8b 4c 24 40	 mov	 rcx, QWORD PTR factory$[rsp]
  00028	48 8b 44 24 40	 mov	 rax, QWORD PTR factory$[rsp]
  0002d	ff 90 58 01 00
	00		 call	 QWORD PTR [rax+344]
  00033	48 89 44 24 20	 mov	 QWORD PTR newTree$[rsp], rax

; 238  : 
; 239  : 	if	(newTree == NULL)

  00038	48 83 7c 24 20
	00		 cmp	 QWORD PTR newTree$[rsp], 0
  0003e	75 04		 jne	 SHORT $LN2@newFromTok

; 240  : 	{
; 241  : 		return	NULL;

  00040	33 c0		 xor	 eax, eax
  00042	eb 16		 jmp	 SHORT $LN1@newFromTok
$LN2@newFromTok:

; 242  : 	}
; 243  : 
; 244  : 	// Pick up the payload we had in the supplied tree
; 245  : 	//
; 246  : 	((pANTLR3_COMMON_TREE)(newTree->super))->token = token;

  00044	48 8b 44 24 20	 mov	 rax, QWORD PTR newTree$[rsp]
  00049	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0004c	48 8b 4c 24 48	 mov	 rcx, QWORD PTR token$[rsp]
  00051	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 247  : 
; 248  : 	return newTree;

  00055	48 8b 44 24 20	 mov	 rax, QWORD PTR newTree$[rsp]
$LN1@newFromTok:

; 249  : }

  0005a	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0005e	5f		 pop	 rdi
  0005f	c3		 ret	 0
newFromToken ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\oss\third_party\antlr\libantlr3c-3.4\src\antlr3commontree.c
;	COMDAT newFromTree
_TEXT	SEGMENT
newTree$ = 32
factory$ = 64
tree$ = 72
newFromTree PROC					; COMDAT

; 214  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 0c 00 00 00	 mov	 ecx, 12
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 215  : 	pANTLR3_BASE_TREE	newTree;
; 216  : 
; 217  : 	newTree = factory->newTree(factory);

  00023	48 8b 4c 24 40	 mov	 rcx, QWORD PTR factory$[rsp]
  00028	48 8b 44 24 40	 mov	 rax, QWORD PTR factory$[rsp]
  0002d	ff 90 58 01 00
	00		 call	 QWORD PTR [rax+344]
  00033	48 89 44 24 20	 mov	 QWORD PTR newTree$[rsp], rax

; 218  : 
; 219  : 	if	(newTree == NULL)

  00038	48 83 7c 24 20
	00		 cmp	 QWORD PTR newTree$[rsp], 0
  0003e	75 04		 jne	 SHORT $LN2@newFromTre

; 220  : 	{
; 221  : 		return	NULL;

  00040	33 c0		 xor	 eax, eax
  00042	eb 2c		 jmp	 SHORT $LN1@newFromTre
$LN2@newFromTre:

; 222  : 	}
; 223  : 
; 224  : 	// Pick up the payload we had in the supplied tree
; 225  : 	//
; 226  : 	((pANTLR3_COMMON_TREE)(newTree->super))->token   = tree->token;

  00044	48 8b 44 24 20	 mov	 rax, QWORD PTR newTree$[rsp]
  00049	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0004c	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tree$[rsp]
  00051	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  00055	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 227  : 	newTree->u		    = tree->baseTree.u;							// Copy any user pointer

  00059	48 8b 44 24 20	 mov	 rax, QWORD PTR newTree$[rsp]
  0005e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tree$[rsp]
  00063	48 8b 49 40	 mov	 rcx, QWORD PTR [rcx+64]
  00067	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 228  : 
; 229  : 	return  newTree;

  0006b	48 8b 44 24 20	 mov	 rax, QWORD PTR newTree$[rsp]
$LN1@newFromTre:

; 230  : }

  00070	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00074	5f		 pop	 rdi
  00075	c3		 ret	 0
newFromTree ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\oss\third_party\antlr\libantlr3c-3.4\src\antlr3commontree.c
;	COMDAT newPoolTree
_TEXT	SEGMENT
tree$ = 32
factory$ = 64
newPoolTree PROC					; COMDAT

; 155  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 0c 00 00 00	 mov	 ecx, 12
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 156  : 	pANTLR3_COMMON_TREE    tree;
; 157  : 
; 158  :     // If we have anything on the re claim stack, reuse that sucker first
; 159  :     //
; 160  :     tree = factory->nilStack->peek(factory->nilStack);

  0001e	48 8b 44 24 40	 mov	 rax, QWORD PTR factory$[rsp]
  00023	48 8b 80 50 01
	00 00		 mov	 rax, QWORD PTR [rax+336]
  0002a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR factory$[rsp]
  0002f	48 8b 89 50 01
	00 00		 mov	 rcx, QWORD PTR [rcx+336]
  00036	ff 50 38	 call	 QWORD PTR [rax+56]
  00039	48 89 44 24 20	 mov	 QWORD PTR tree$[rsp], rax

; 161  : 
; 162  :     if  (tree != NULL)

  0003e	48 83 7c 24 20
	00		 cmp	 QWORD PTR tree$[rsp], 0
  00044	74 25		 je	 SHORT $LN2@newPoolTre

; 163  :     {
; 164  :         // Cool we got something we could reuse, it will have been cleaned up by
; 165  :         // whatever put it back on the stack (for instance if it had a child vector,
; 166  :         // that will have been cleared to hold zero entries and that vector will get reused too.
; 167  :         // It is the basetree pointer that is placed on the stack of course
; 168  :         //
; 169  :         factory->nilStack->pop(factory->nilStack);

  00046	48 8b 44 24 40	 mov	 rax, QWORD PTR factory$[rsp]
  0004b	48 8b 80 50 01
	00 00		 mov	 rax, QWORD PTR [rax+336]
  00052	48 8b 4c 24 40	 mov	 rcx, QWORD PTR factory$[rsp]
  00057	48 8b 89 50 01
	00 00		 mov	 rcx, QWORD PTR [rcx+336]
  0005e	ff 50 18	 call	 QWORD PTR [rax+24]

; 170  :         return (pANTLR3_BASE_TREE)tree;

  00061	48 8b 44 24 20	 mov	 rax, QWORD PTR tree$[rsp]
  00066	e9 97 00 00 00	 jmp	 $LN1@newPoolTre
$LN2@newPoolTre:

; 171  : 
; 172  :     }
; 173  : 	// See if we need a new tree pool before allocating a new tree
; 174  : 	//
; 175  : 	if	(factory->nextTree >= ANTLR3_FACTORY_POOL_SIZE)

  0006b	48 8b 44 24 40	 mov	 rax, QWORD PTR factory$[rsp]
  00070	81 78 0c 00 04
	00 00		 cmp	 DWORD PTR [rax+12], 1024 ; 00000400H
  00077	72 0a		 jb	 SHORT $LN3@newPoolTre

; 176  : 	{
; 177  : 		// We ran out of tokens in the current pool, so we need a new pool
; 178  : 		//
; 179  : 		newPool(factory);

  00079	48 8b 4c 24 40	 mov	 rcx, QWORD PTR factory$[rsp]
  0007e	e8 00 00 00 00	 call	 newPool
$LN3@newPoolTre:

; 180  : 	}
; 181  : 
; 182  : 	// Assuming everything went well - we are trying for performance here so doing minimal
; 183  : 	// error checking - then we can work out what the pointer is to the next commontree.
; 184  : 	//
; 185  : 	tree   = factory->pools[factory->thisPool] + factory->nextTree;

  00083	48 8b 44 24 40	 mov	 rax, QWORD PTR factory$[rsp]
  00088	48 63 40 08	 movsxd	 rax, DWORD PTR [rax+8]
  0008c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR factory$[rsp]
  00091	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00094	48 8b 54 24 40	 mov	 rdx, QWORD PTR factory$[rsp]
  00099	8b 52 0c	 mov	 edx, DWORD PTR [rdx+12]
  0009c	48 69 d2 38 01
	00 00		 imul	 rdx, rdx, 312		; 00000138H
  000a3	48 03 14 c1	 add	 rdx, QWORD PTR [rcx+rax*8]
  000a7	48 8b c2	 mov	 rax, rdx
  000aa	48 89 44 24 20	 mov	 QWORD PTR tree$[rsp], rax

; 186  : 	factory->nextTree++;

  000af	48 8b 44 24 40	 mov	 rax, QWORD PTR factory$[rsp]
  000b4	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  000b7	ff c0		 inc	 eax
  000b9	48 8b 4c 24 40	 mov	 rcx, QWORD PTR factory$[rsp]
  000be	89 41 0c	 mov	 DWORD PTR [rcx+12], eax

; 187  : 
; 188  : 	// We have our token pointer now, so we can initialize it to the predefined model.
; 189  : 	//
; 190  :     antlr3SetCTAPI(tree);

  000c1	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tree$[rsp]
  000c6	e8 00 00 00 00	 call	 antlr3SetCTAPI

; 191  : 
; 192  :     // Set some initial variables for future copying, including a string factory
; 193  :     // that we can use later for converting trees to strings.
; 194  :     //
; 195  : 	tree->factory				= factory;

  000cb	48 8b 44 24 20	 mov	 rax, QWORD PTR tree$[rsp]
  000d0	48 8b 4c 24 40	 mov	 rcx, QWORD PTR factory$[rsp]
  000d5	48 89 48 30	 mov	 QWORD PTR [rax+48], rcx

; 196  :     tree->baseTree.strFactory	= factory->unTruc.baseTree.strFactory;

  000d9	48 8b 44 24 20	 mov	 rax, QWORD PTR tree$[rsp]
  000de	48 8b 4c 24 40	 mov	 rcx, QWORD PTR factory$[rsp]
  000e3	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  000e7	48 89 48 58	 mov	 QWORD PTR [rax+88], rcx

; 197  : 
; 198  : 	// The super points to the common tree so we must override the one used by
; 199  : 	// by the pre-built tree as otherwise we will always poitn to the same initial
; 200  : 	// common tree and we might spend 3 hours trying to debug why - this would never
; 201  : 	// happen to me of course! :-(
; 202  : 	//
; 203  : 	tree->baseTree.super	= tree;

  000eb	48 8b 44 24 20	 mov	 rax, QWORD PTR tree$[rsp]
  000f0	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tree$[rsp]
  000f5	48 89 48 38	 mov	 QWORD PTR [rax+56], rcx

; 204  : 
; 205  : 
; 206  : 	// And we are done
; 207  : 	//
; 208  : 	return  &(tree->baseTree);

  000f9	48 8b 44 24 20	 mov	 rax, QWORD PTR tree$[rsp]
  000fe	48 83 c0 38	 add	 rax, 56			; 00000038H
$LN1@newPoolTre:

; 209  : }

  00102	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00106	5f		 pop	 rdi
  00107	c3		 ret	 0
newPoolTree ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\oss\third_party\antlr\libantlr3c-3.4\src\antlr3commontree.c
;	COMDAT newPool
_TEXT	SEGMENT
factory$ = 48
newPool	PROC						; COMDAT

; 125  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 126  :     // Increment factory count
; 127  :     //
; 128  :     factory->thisPool++;

  0001e	48 8b 44 24 30	 mov	 rax, QWORD PTR factory$[rsp]
  00023	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00026	ff c0		 inc	 eax
  00028	48 8b 4c 24 30	 mov	 rcx, QWORD PTR factory$[rsp]
  0002d	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 129  : 
; 130  :     // Ensure we have enough pointers allocated
; 131  :     //
; 132  :     factory->pools = (pANTLR3_COMMON_TREE *)

  00030	48 8b 44 24 30	 mov	 rax, QWORD PTR factory$[rsp]
  00035	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00038	ff c0		 inc	 eax
  0003a	48 98		 cdqe
  0003c	48 c1 e0 03	 shl	 rax, 3
  00040	8b c0		 mov	 eax, eax
  00042	8b d0		 mov	 edx, eax
  00044	48 8b 44 24 30	 mov	 rax, QWORD PTR factory$[rsp]
  00049	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0004c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_realloc
  00052	48 8b 4c 24 30	 mov	 rcx, QWORD PTR factory$[rsp]
  00057	48 89 01	 mov	 QWORD PTR [rcx], rax

; 133  : 					ANTLR3_REALLOC(	(void *)factory->pools,										// Current pools pointer (starts at NULL)
; 134  : 					(ANTLR3_UINT32)((factory->thisPool + 1) * sizeof(pANTLR3_COMMON_TREE *))	// Memory for new pool pointers
; 135  : 					);
; 136  : 
; 137  :     // Allocate a new pool for the factory
; 138  :     //
; 139  :     factory->pools[factory->thisPool]	=

  0005a	b9 00 e0 04 00	 mov	 ecx, 319488		; 0004e000H
  0005f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00065	48 8b 4c 24 30	 mov	 rcx, QWORD PTR factory$[rsp]
  0006a	48 63 49 08	 movsxd	 rcx, DWORD PTR [rcx+8]
  0006e	48 8b 54 24 30	 mov	 rdx, QWORD PTR factory$[rsp]
  00073	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  00076	48 89 04 ca	 mov	 QWORD PTR [rdx+rcx*8], rax

; 140  : 			    (pANTLR3_COMMON_TREE) 
; 141  : 				ANTLR3_MALLOC((size_t)(sizeof(ANTLR3_COMMON_TREE) * ANTLR3_FACTORY_POOL_SIZE));
; 142  : 
; 143  : 
; 144  :     // Reset the counters
; 145  :     //
; 146  :     factory->nextTree	= 0;

  0007a	48 8b 44 24 30	 mov	 rax, QWORD PTR factory$[rsp]
  0007f	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [rax+12], 0

; 147  :   
; 148  :     // Done
; 149  :     //
; 150  :     return;
; 151  : }

  00086	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0008a	5f		 pop	 rdi
  0008b	c3		 ret	 0
newPool	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\oss\third_party\antlr\libantlr3c-3.4\src\antlr3commontree.c
;	COMDAT reuse
_TEXT	SEGMENT
cTree$ = 32
tv76 = 40
tree$ = 64
reuse	PROC						; COMDAT

; 531  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 0c 00 00 00	 mov	 ecx, 12
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 532  :     pANTLR3_COMMON_TREE	    cTree;
; 533  : 
; 534  : 	cTree   = (pANTLR3_COMMON_TREE)(tree->super);

  0001e	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00023	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00026	48 89 44 24 20	 mov	 QWORD PTR cTree$[rsp], rax

; 535  : 
; 536  :     if  (cTree->factory != NULL)

  0002b	48 8b 44 24 20	 mov	 rax, QWORD PTR cTree$[rsp]
  00030	48 83 78 30 00	 cmp	 QWORD PTR [rax+48], 0
  00035	74 59		 je	 SHORT $LN2@reuse

; 537  :     {
; 538  : 
; 539  :         if  (cTree->baseTree.children != NULL)

  00037	48 8b 44 24 20	 mov	 rax, QWORD PTR cTree$[rsp]
  0003c	48 83 78 48 00	 cmp	 QWORD PTR [rax+72], 0
  00041	74 18		 je	 SHORT $LN3@reuse

; 540  :         {
; 541  :             
; 542  :             cTree->baseTree.children->clear(cTree->baseTree.children);

  00043	48 8b 44 24 20	 mov	 rax, QWORD PTR cTree$[rsp]
  00048	48 8b 40 48	 mov	 rax, QWORD PTR [rax+72]
  0004c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR cTree$[rsp]
  00051	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  00055	ff 90 38 01 00
	00		 call	 QWORD PTR [rax+312]
$LN3@reuse:

; 543  :         }
; 544  :        cTree->factory->nilStack->push(cTree->factory->nilStack, tree, NULL);

  0005b	48 8b 44 24 20	 mov	 rax, QWORD PTR cTree$[rsp]
  00060	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  00064	48 8b 4c 24 20	 mov	 rcx, QWORD PTR cTree$[rsp]
  00069	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  0006d	48 8b 89 50 01
	00 00		 mov	 rcx, QWORD PTR [rcx+336]
  00074	48 89 4c 24 28	 mov	 QWORD PTR tv76[rsp], rcx
  00079	45 33 c0	 xor	 r8d, r8d
  0007c	48 8b 54 24 40	 mov	 rdx, QWORD PTR tree$[rsp]
  00081	48 8b 88 50 01
	00 00		 mov	 rcx, QWORD PTR [rax+336]
  00088	48 8b 44 24 28	 mov	 rax, QWORD PTR tv76[rsp]
  0008d	ff 50 28	 call	 QWORD PTR [rax+40]
$LN2@reuse:

; 545  :        
; 546  :     }
; 547  : }

  00090	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00094	5f		 pop	 rdi
  00095	c3		 ret	 0
reuse	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\oss\third_party\antlr\libantlr3c-3.4\src\antlr3commontree.c
;	COMDAT createChildrenList
_TEXT	SEGMENT
tv74 = 32
tree$ = 64
createChildrenList PROC					; COMDAT

; 375  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 0c 00 00 00	 mov	 ecx, 12
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 376  : 	tree->children = ((pANTLR3_COMMON_TREE)(tree->super))->factory->vFactory->newVector(((pANTLR3_COMMON_TREE)(tree->super))->factory->vFactory);

  0001e	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00023	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00026	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  0002a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  0002f	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00032	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  00036	48 8b 89 48 01
	00 00		 mov	 rcx, QWORD PTR [rcx+328]
  0003d	48 89 4c 24 20	 mov	 QWORD PTR tv74[rsp], rcx
  00042	48 8b 88 48 01
	00 00		 mov	 rcx, QWORD PTR [rax+328]
  00049	48 8b 44 24 20	 mov	 rax, QWORD PTR tv74[rsp]
  0004e	ff 90 80 01 00
	00		 call	 QWORD PTR [rax+384]
  00054	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  00059	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 377  : }

  0005d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00061	5f		 pop	 rdi
  00062	c3		 ret	 0
createChildrenList ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\oss\third_party\antlr\libantlr3c-3.4\src\antlr3commontree.c
;	COMDAT getChildIndex
_TEXT	SEGMENT
tree$ = 16
getChildIndex PROC					; COMDAT

; 522  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 523  : 	return ((pANTLR3_COMMON_TREE)(tree->super))->childIndex;

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR tree$[rsp]
  0000b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0000e	8b 40 28	 mov	 eax, DWORD PTR [rax+40]

; 524  : }

  00011	5f		 pop	 rdi
  00012	c3		 ret	 0
getChildIndex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\oss\third_party\antlr\libantlr3c-3.4\src\antlr3commontree.c
;	COMDAT setChildIndex
_TEXT	SEGMENT
tree$ = 16
i$ = 24
setChildIndex PROC					; COMDAT

; 517  : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	57		 push	 rdi

; 518  : 	((pANTLR3_COMMON_TREE)(tree->super))->childIndex = i;

  0000a	48 8b 44 24 10	 mov	 rax, QWORD PTR tree$[rsp]
  0000f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00012	8b 4c 24 18	 mov	 ecx, DWORD PTR i$[rsp]
  00016	89 48 28	 mov	 DWORD PTR [rax+40], ecx

; 519  : }

  00019	5f		 pop	 rdi
  0001a	c3		 ret	 0
setChildIndex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\oss\third_party\antlr\libantlr3c-3.4\src\antlr3commontree.c
;	COMDAT setParent
_TEXT	SEGMENT
tv69 = 0
tree$ = 32
parent$ = 40
setParent PROC						; COMDAT

; 511  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 10	 sub	 rsp, 16
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 04 00 00 00	 mov	 ecx, 4
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR [rsp+32]

; 512  : 	((pANTLR3_COMMON_TREE)(tree->super))->parent = parent == NULL ? NULL : ((pANTLR3_COMMON_TREE)(parent->super))->parent;

  00023	48 83 7c 24 28
	00		 cmp	 QWORD PTR parent$[rsp], 0
  00029	75 0a		 jne	 SHORT $LN3@setParent
  0002b	48 c7 04 24 00
	00 00 00	 mov	 QWORD PTR tv69[rsp], 0
  00033	eb 10		 jmp	 SHORT $LN4@setParent
$LN3@setParent:
  00035	48 8b 44 24 28	 mov	 rax, QWORD PTR parent$[rsp]
  0003a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0003d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00041	48 89 04 24	 mov	 QWORD PTR tv69[rsp], rax
$LN4@setParent:
  00045	48 8b 44 24 20	 mov	 rax, QWORD PTR tree$[rsp]
  0004a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0004d	48 8b 0c 24	 mov	 rcx, QWORD PTR tv69[rsp]
  00051	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx

; 513  : }

  00055	48 83 c4 10	 add	 rsp, 16
  00059	5f		 pop	 rdi
  0005a	c3		 ret	 0
setParent ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\oss\third_party\antlr\libantlr3c-3.4\src\antlr3commontree.c
;	COMDAT getParent
_TEXT	SEGMENT
tree$ = 16
getParent PROC						; COMDAT

; 505  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 506  : 	return & (((pANTLR3_COMMON_TREE)(tree->super))->parent->baseTree);

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR tree$[rsp]
  0000b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0000e	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00012	48 83 c0 38	 add	 rax, 56			; 00000038H

; 507  : }

  00016	5f		 pop	 rdi
  00017	c3		 ret	 0
getParent ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\oss\third_party\antlr\libantlr3c-3.4\src\antlr3commontree.c
;	COMDAT toString
_TEXT	SEGMENT
nilNode$1 = 32
tv83 = 40
tree$ = 64
toString PROC						; COMDAT

; 490  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 0c 00 00 00	 mov	 ecx, 12
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 491  : 	if  (tree->isNilNode(tree) == ANTLR3_TRUE)

  0001e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  00023	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00028	ff 90 c0 00 00
	00		 call	 QWORD PTR [rax+192]
  0002e	0f b6 c0	 movzx	 eax, al
  00031	83 f8 01	 cmp	 eax, 1
  00034	75 2e		 jne	 SHORT $LN2@toString

; 492  : 	{
; 493  : 		pANTLR3_STRING  nilNode;
; 494  : 
; 495  : 		nilNode	= tree->strFactory->newPtr(tree->strFactory, (pANTLR3_UINT8)"nil", 3);

  00036	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0003b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0003f	41 b8 03 00 00
	00		 mov	 r8d, 3
  00045	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03ILAMHENH@nil?$AA@
  0004c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  00051	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  00055	ff 50 20	 call	 QWORD PTR [rax+32]
  00058	48 89 44 24 20	 mov	 QWORD PTR nilNode$1[rsp], rax

; 496  : 
; 497  : 		return nilNode;

  0005d	48 8b 44 24 20	 mov	 rax, QWORD PTR nilNode$1[rsp]
  00062	eb 25		 jmp	 SHORT $LN1@toString
$LN2@toString:

; 498  : 	}
; 499  : 
; 500  : 	return	((pANTLR3_COMMON_TREE)(tree->super))->token->getText(((pANTLR3_COMMON_TREE)(tree->super))->token);

  00064	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00069	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0006c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  00071	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00074	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  00078	48 89 4c 24 28	 mov	 QWORD PTR tv83[rsp], rcx
  0007d	48 8b 48 18	 mov	 rcx, QWORD PTR [rax+24]
  00081	48 8b 44 24 28	 mov	 rax, QWORD PTR tv83[rsp]
  00086	ff 50 78	 call	 QWORD PTR [rax+120]
$LN1@toString:

; 501  : }

  00089	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0008d	5f		 pop	 rdi
  0008e	c3		 ret	 0
toString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\oss\third_party\antlr\libantlr3c-3.4\src\antlr3commontree.c
;	COMDAT getCharPositionInLine
_TEXT	SEGMENT
token$ = 32
child$1 = 40
tree$ = 64
getCharPositionInLine PROC				; COMDAT

; 469  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 0c 00 00 00	 mov	 ecx, 12
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 470  : 	pANTLR3_COMMON_TOKEN    token;
; 471  : 
; 472  : 	token   = ((pANTLR3_COMMON_TREE)(tree->super))->token;

  0001e	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00023	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00026	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  0002a	48 89 44 24 20	 mov	 QWORD PTR token$[rsp], rax

; 473  : 
; 474  : 	if	(token == NULL || token->getCharPositionInLine(token) == -1)

  0002f	48 83 7c 24 20
	00		 cmp	 QWORD PTR token$[rsp], 0
  00035	74 15		 je	 SHORT $LN3@getCharPos
  00037	48 8b 4c 24 20	 mov	 rcx, QWORD PTR token$[rsp]
  0003c	48 8b 44 24 20	 mov	 rax, QWORD PTR token$[rsp]
  00041	ff 90 b0 00 00
	00		 call	 QWORD PTR [rax+176]
  00047	83 f8 ff	 cmp	 eax, -1
  0004a	75 3b		 jne	 SHORT $LN2@getCharPos
$LN3@getCharPos:

; 475  : 	{
; 476  : 		if  (tree->getChildCount(tree) > 0)

  0004c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  00051	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00056	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  0005c	85 c0		 test	 eax, eax
  0005e	76 23		 jbe	 SHORT $LN4@getCharPos

; 477  : 		{
; 478  : 			pANTLR3_BASE_TREE	child;
; 479  : 
; 480  : 			child   = (pANTLR3_BASE_TREE)tree->getChild(tree, 0);

  00060	33 d2		 xor	 edx, edx
  00062	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tree$[rsp]
  00067	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  0006c	ff 50 70	 call	 QWORD PTR [rax+112]
  0006f	48 89 44 24 28	 mov	 QWORD PTR child$1[rsp], rax

; 481  : 
; 482  : 			return child->getCharPositionInLine(child);

  00074	48 8b 4c 24 28	 mov	 rcx, QWORD PTR child$1[rsp]
  00079	48 8b 44 24 28	 mov	 rax, QWORD PTR child$1[rsp]
  0007e	ff 50 68	 call	 QWORD PTR [rax+104]
  00081	eb 14		 jmp	 SHORT $LN1@getCharPos
$LN4@getCharPos:

; 483  : 		}
; 484  : 		return 0;

  00083	33 c0		 xor	 eax, eax
  00085	eb 10		 jmp	 SHORT $LN1@getCharPos
$LN2@getCharPos:

; 485  : 	}
; 486  : 	return  token->getCharPositionInLine(token);

  00087	48 8b 4c 24 20	 mov	 rcx, QWORD PTR token$[rsp]
  0008c	48 8b 44 24 20	 mov	 rax, QWORD PTR token$[rsp]
  00091	ff 90 b0 00 00
	00		 call	 QWORD PTR [rax+176]
$LN1@getCharPos:

; 487  : }

  00097	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0009b	5f		 pop	 rdi
  0009c	c3		 ret	 0
getCharPositionInLine ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\oss\third_party\antlr\libantlr3c-3.4\src\antlr3commontree.c
;	COMDAT getLine
_TEXT	SEGMENT
cTree$ = 32
token$ = 40
child$1 = 48
tree$ = 80
getLine	PROC						; COMDAT

; 446  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 10 00 00 00	 mov	 ecx, 16
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]

; 447  : 	pANTLR3_COMMON_TREE	    cTree;
; 448  : 	pANTLR3_COMMON_TOKEN    token;
; 449  : 
; 450  : 	cTree   = (pANTLR3_COMMON_TREE)(tree->super);

  0001e	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  00023	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00026	48 89 44 24 20	 mov	 QWORD PTR cTree$[rsp], rax

; 451  : 
; 452  : 	token   = cTree->token;

  0002b	48 8b 44 24 20	 mov	 rax, QWORD PTR cTree$[rsp]
  00030	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00034	48 89 44 24 28	 mov	 QWORD PTR token$[rsp], rax

; 453  : 
; 454  : 	if	(token == NULL || token->getLine(token) == 0)

  00039	48 83 7c 24 28
	00		 cmp	 QWORD PTR token$[rsp], 0
  0003f	74 14		 je	 SHORT $LN3@getLine
  00041	48 8b 4c 24 28	 mov	 rcx, QWORD PTR token$[rsp]
  00046	48 8b 44 24 28	 mov	 rax, QWORD PTR token$[rsp]
  0004b	ff 90 a0 00 00
	00		 call	 QWORD PTR [rax+160]
  00051	85 c0		 test	 eax, eax
  00053	75 3e		 jne	 SHORT $LN2@getLine
$LN3@getLine:

; 455  : 	{
; 456  : 		if  (tree->getChildCount(tree) > 0)

  00055	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  0005a	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  0005f	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  00065	85 c0		 test	 eax, eax
  00067	76 26		 jbe	 SHORT $LN4@getLine

; 457  : 		{
; 458  : 			pANTLR3_BASE_TREE	child;
; 459  : 
; 460  : 			child   = (pANTLR3_BASE_TREE)tree->getChild(tree, 0);

  00069	33 d2		 xor	 edx, edx
  0006b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tree$[rsp]
  00070	48 8b 44 24 50	 mov	 rax, QWORD PTR tree$[rsp]
  00075	ff 50 70	 call	 QWORD PTR [rax+112]
  00078	48 89 44 24 30	 mov	 QWORD PTR child$1[rsp], rax

; 461  : 			return child->getLine(child);

  0007d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR child$1[rsp]
  00082	48 8b 44 24 30	 mov	 rax, QWORD PTR child$1[rsp]
  00087	ff 90 b0 00 00
	00		 call	 QWORD PTR [rax+176]
  0008d	eb 14		 jmp	 SHORT $LN1@getLine
$LN4@getLine:

; 462  : 		}
; 463  : 		return 0;

  0008f	33 c0		 xor	 eax, eax
  00091	eb 10		 jmp	 SHORT $LN1@getLine
$LN2@getLine:

; 464  : 	}
; 465  : 	return  token->getLine(token);

  00093	48 8b 4c 24 28	 mov	 rcx, QWORD PTR token$[rsp]
  00098	48 8b 44 24 28	 mov	 rax, QWORD PTR token$[rsp]
  0009d	ff 90 a0 00 00
	00		 call	 QWORD PTR [rax+160]
$LN1@getLine:

; 466  : }

  000a3	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000a7	5f		 pop	 rdi
  000a8	c3		 ret	 0
getLine	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\oss\third_party\antlr\libantlr3c-3.4\src\antlr3commontree.c
;	COMDAT getText
_TEXT	SEGMENT
tree$ = 48
getText	PROC						; COMDAT

; 441  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 442  : 	return	tree->toString(tree);

  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tree$[rsp]
  00023	48 8b 44 24 30	 mov	 rax, QWORD PTR tree$[rsp]
  00028	ff 90 d8 00 00
	00		 call	 QWORD PTR [rax+216]

; 443  : }

  0002e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00032	5f		 pop	 rdi
  00033	c3		 ret	 0
getText	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\oss\third_party\antlr\libantlr3c-3.4\src\antlr3commontree.c
;	COMDAT getType
_TEXT	SEGMENT
theTree$ = 32
tree$ = 64
getType	PROC						; COMDAT

; 424  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 0c 00 00 00	 mov	 ecx, 12
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 425  : 	pANTLR3_COMMON_TREE    theTree;
; 426  : 
; 427  : 	theTree = (pANTLR3_COMMON_TREE)(tree->super);

  0001e	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00023	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00026	48 89 44 24 20	 mov	 QWORD PTR theTree$[rsp], rax

; 428  : 
; 429  : 	if	(theTree->token == NULL)

  0002b	48 8b 44 24 20	 mov	 rax, QWORD PTR theTree$[rsp]
  00030	48 83 78 18 00	 cmp	 QWORD PTR [rax+24], 0
  00035	75 06		 jne	 SHORT $LN2@getType

; 430  : 	{
; 431  : 		return	0;

  00037	33 c0		 xor	 eax, eax
  00039	eb 1a		 jmp	 SHORT $LN1@getType

; 432  : 	}

  0003b	eb 18		 jmp	 SHORT $LN3@getType
$LN2@getType:

; 433  : 	else
; 434  : 	{
; 435  : 		return	theTree->token->getType(theTree->token);

  0003d	48 8b 44 24 20	 mov	 rax, QWORD PTR theTree$[rsp]
  00042	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00046	48 8b 4c 24 20	 mov	 rcx, QWORD PTR theTree$[rsp]
  0004b	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  0004f	ff 90 90 00 00
	00		 call	 QWORD PTR [rax+144]
$LN3@getType:
$LN1@getType:

; 436  : 	}
; 437  : }

  00055	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00059	5f		 pop	 rdi
  0005a	c3		 ret	 0
getType	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\oss\third_party\antlr\libantlr3c-3.4\src\antlr3commontree.c
;	COMDAT isNilNode
_TEXT	SEGMENT
tree$ = 16
isNilNode PROC						; COMDAT

; 409  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 410  : 	// This is a Nil tree if it has no payload (Token in our case)
; 411  : 	//
; 412  : 	if	(((pANTLR3_COMMON_TREE)(tree->super))->token == NULL)

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR tree$[rsp]
  0000b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0000e	48 83 78 18 00	 cmp	 QWORD PTR [rax+24], 0
  00013	75 06		 jne	 SHORT $LN2@isNilNode

; 413  : 	{
; 414  : 		return ANTLR3_TRUE;

  00015	b0 01		 mov	 al, 1
  00017	eb 04		 jmp	 SHORT $LN1@isNilNode

; 415  : 	}

  00019	eb 02		 jmp	 SHORT $LN3@isNilNode
$LN2@isNilNode:

; 416  : 	else
; 417  : 	{
; 418  : 		return ANTLR3_FALSE;

  0001b	32 c0		 xor	 al, al
$LN3@isNilNode:
$LN1@isNilNode:

; 419  : 	}
; 420  : }

  0001d	5f		 pop	 rdi
  0001e	c3		 ret	 0
isNilNode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\oss\third_party\antlr\libantlr3c-3.4\src\antlr3commontree.c
;	COMDAT dupNode
_TEXT	SEGMENT
theOld$ = 32
tree$ = 64
dupNode	PROC						; COMDAT

; 394  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 0c 00 00 00	 mov	 ecx, 12
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 395  :     // The node we are duplicating is in fact the common tree (that's why we are here)
; 396  :     // so we use the super pointer to duplicate.
; 397  :     //
; 398  :     pANTLR3_COMMON_TREE	    theOld;
; 399  :     
; 400  : 	theOld	= (pANTLR3_COMMON_TREE)(tree->super);

  0001e	48 8b 44 24 40	 mov	 rax, QWORD PTR tree$[rsp]
  00023	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00026	48 89 44 24 20	 mov	 QWORD PTR theOld$[rsp], rax

; 401  : 
; 402  : 	// The pointer we return is the base implementation of course
; 403  :     //
; 404  : 	return  theOld->factory->newFromTree(theOld->factory, theOld);

  0002b	48 8b 44 24 20	 mov	 rax, QWORD PTR theOld$[rsp]
  00030	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  00034	48 8b 54 24 20	 mov	 rdx, QWORD PTR theOld$[rsp]
  00039	48 8b 4c 24 20	 mov	 rcx, QWORD PTR theOld$[rsp]
  0003e	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  00042	ff 90 60 01 00
	00		 call	 QWORD PTR [rax+352]

; 405  : }

  00048	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0004c	5f		 pop	 rdi
  0004d	c3		 ret	 0
dupNode	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\oss\third_party\antlr\libantlr3c-3.4\src\antlr3commontree.c
;	COMDAT getToken
_TEXT	SEGMENT
tree$ = 16
getToken PROC						; COMDAT

; 382  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 383  :     // The token is the payload of the common tree or other implementor
; 384  :     // so it is stored within ourselves, which is the super pointer.Note 
; 385  : 	// that whatever the actual token is, it is passed around by its pointer
; 386  : 	// to the common token implementation, which it may of course surround
; 387  : 	// with its own super structure.
; 388  :     //
; 389  :     return  ((pANTLR3_COMMON_TREE)(tree->super))->token;

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR tree$[rsp]
  0000b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0000e	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]

; 390  : }

  00012	5f		 pop	 rdi
  00013	c3		 ret	 0
getToken ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\oss\third_party\antlr\libantlr3c-3.4\src\antlr3commontree.c
;	COMDAT antlr3SetCTAPI
_TEXT	SEGMENT
tree$ = 48
antlr3SetCTAPI PROC					; COMDAT

; 290  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 291  :     // Init base tree
; 292  :     //
; 293  :     antlr3BaseTreeNew(&(tree->baseTree));

  0001e	48 8b 44 24 30	 mov	 rax, QWORD PTR tree$[rsp]
  00023	48 83 c0 38	 add	 rax, 56			; 00000038H
  00027	48 8b c8	 mov	 rcx, rax
  0002a	e8 00 00 00 00	 call	 antlr3BaseTreeNew

; 294  : 
; 295  :     // We need a pointer to ourselves for 
; 296  :     // the payload and few functions that we
; 297  :     // provide.
; 298  :     //
; 299  :     tree->baseTree.super    =  tree;

  0002f	48 8b 44 24 30	 mov	 rax, QWORD PTR tree$[rsp]
  00034	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tree$[rsp]
  00039	48 89 48 38	 mov	 QWORD PTR [rax+56], rcx

; 300  : 
; 301  :     // Common tree overrides
; 302  : 
; 303  :     tree->baseTree.isNilNode                = isNilNode;

  0003d	48 8b 44 24 30	 mov	 rax, QWORD PTR tree$[rsp]
  00042	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:isNilNode
  00049	48 89 88 f8 00
	00 00		 mov	 QWORD PTR [rax+248], rcx

; 304  :     tree->baseTree.toString					= toString;

  00050	48 8b 44 24 30	 mov	 rax, QWORD PTR tree$[rsp]
  00055	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:toString
  0005c	48 89 88 10 01
	00 00		 mov	 QWORD PTR [rax+272], rcx

; 305  :     tree->baseTree.dupNode					= (void *(*)(pANTLR3_BASE_TREE))(dupNode);

  00063	48 8b 44 24 30	 mov	 rax, QWORD PTR tree$[rsp]
  00068	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:dupNode
  0006f	48 89 88 90 00
	00 00		 mov	 QWORD PTR [rax+144], rcx

; 306  :     tree->baseTree.getLine					= getLine;

  00076	48 8b 44 24 30	 mov	 rax, QWORD PTR tree$[rsp]
  0007b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:getLine
  00082	48 89 88 e8 00
	00 00		 mov	 QWORD PTR [rax+232], rcx

; 307  :     tree->baseTree.getCharPositionInLine	= getCharPositionInLine;

  00089	48 8b 44 24 30	 mov	 rax, QWORD PTR tree$[rsp]
  0008e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:getCharPositionInLine
  00095	48 89 88 a0 00
	00 00		 mov	 QWORD PTR [rax+160], rcx

; 308  :     tree->baseTree.toString					= toString;

  0009c	48 8b 44 24 30	 mov	 rax, QWORD PTR tree$[rsp]
  000a1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:toString
  000a8	48 89 88 10 01
	00 00		 mov	 QWORD PTR [rax+272], rcx

; 309  :     tree->baseTree.getType					= getType;

  000af	48 8b 44 24 30	 mov	 rax, QWORD PTR tree$[rsp]
  000b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:getType
  000bb	48 89 88 d8 00
	00 00		 mov	 QWORD PTR [rax+216], rcx

; 310  :     tree->baseTree.getText					= getText;

  000c2	48 8b 44 24 30	 mov	 rax, QWORD PTR tree$[rsp]
  000c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:getText
  000ce	48 89 88 f0 00
	00 00		 mov	 QWORD PTR [rax+240], rcx

; 311  :     tree->baseTree.getToken					= getToken;

  000d5	48 8b 44 24 30	 mov	 rax, QWORD PTR tree$[rsp]
  000da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:getToken
  000e1	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 312  : 	tree->baseTree.getParent				= getParent;

  000e5	48 8b 44 24 30	 mov	 rax, QWORD PTR tree$[rsp]
  000ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:getParent
  000f1	48 89 88 c8 00
	00 00		 mov	 QWORD PTR [rax+200], rcx

; 313  : 	tree->baseTree.setParent				= setParent;

  000f8	48 8b 44 24 30	 mov	 rax, QWORD PTR tree$[rsp]
  000fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:setParent
  00104	48 89 88 d0 00
	00 00		 mov	 QWORD PTR [rax+208], rcx

; 314  : 	tree->baseTree.setChildIndex			= setChildIndex;

  0010b	48 8b 44 24 30	 mov	 rax, QWORD PTR tree$[rsp]
  00110	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:setChildIndex
  00117	48 89 88 b0 00
	00 00		 mov	 QWORD PTR [rax+176], rcx

; 315  : 	tree->baseTree.getChildIndex			= getChildIndex;

  0011e	48 8b 44 24 30	 mov	 rax, QWORD PTR tree$[rsp]
  00123	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:getChildIndex
  0012a	48 89 88 b8 00
	00 00		 mov	 QWORD PTR [rax+184], rcx

; 316  : 	tree->baseTree.createChildrenList		= createChildrenList;

  00131	48 8b 44 24 30	 mov	 rax, QWORD PTR tree$[rsp]
  00136	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:createChildrenList
  0013d	48 89 48 78	 mov	 QWORD PTR [rax+120], rcx

; 317  :     tree->baseTree.reuse                    = reuse;

  00141	48 8b 44 24 30	 mov	 rax, QWORD PTR tree$[rsp]
  00146	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:reuse
  0014d	48 89 88 28 01
	00 00		 mov	 QWORD PTR [rax+296], rcx

; 318  : 	tree->baseTree.free						= NULL;	    // Factory trees have no free function

  00154	48 8b 44 24 30	 mov	 rax, QWORD PTR tree$[rsp]
  00159	48 c7 80 30 01
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+304], 0

; 319  :     tree->baseTree.u                        = NULL;     // Initialize user pointer            

  00164	48 8b 44 24 30	 mov	 rax, QWORD PTR tree$[rsp]
  00169	48 c7 40 40 00
	00 00 00	 mov	 QWORD PTR [rax+64], 0

; 320  : 
; 321  : 	tree->baseTree.children	= NULL;

  00171	48 8b 44 24 30	 mov	 rax, QWORD PTR tree$[rsp]
  00176	48 c7 40 48 00
	00 00 00	 mov	 QWORD PTR [rax+72], 0

; 322  : 
; 323  :     tree->token				= NULL;	// No token as yet

  0017e	48 8b 44 24 30	 mov	 rax, QWORD PTR tree$[rsp]
  00183	48 c7 40 18 00
	00 00 00	 mov	 QWORD PTR [rax+24], 0

; 324  :     tree->startIndex		= 0;

  0018b	48 8b 44 24 30	 mov	 rax, QWORD PTR tree$[rsp]
  00190	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0

; 325  :     tree->stopIndex			= 0;

  00198	48 8b 44 24 30	 mov	 rax, QWORD PTR tree$[rsp]
  0019d	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0

; 326  : 	tree->parent			= NULL;	// No parent yet

  001a5	48 8b 44 24 30	 mov	 rax, QWORD PTR tree$[rsp]
  001aa	48 c7 40 20 00
	00 00 00	 mov	 QWORD PTR [rax+32], 0

; 327  : 	tree->childIndex		= -1;

  001b2	48 8b 44 24 30	 mov	 rax, QWORD PTR tree$[rsp]
  001b7	c7 40 28 ff ff
	ff ff		 mov	 DWORD PTR [rax+40], -1

; 328  : 
; 329  :     return;
; 330  : }

  001be	48 83 c4 20	 add	 rsp, 32			; 00000020H
  001c2	5f		 pop	 rdi
  001c3	c3		 ret	 0
antlr3SetCTAPI ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\oss\third_party\antlr\libantlr3c-3.4\src\antlr3commontree.c
;	COMDAT antlr3ArboretumNew
_TEXT	SEGMENT
factory$ = 32
strFactory$ = 64
antlr3ArboretumNew PROC					; COMDAT

; 66   : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 0c 00 00 00	 mov	 ecx, 12
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 67   :     pANTLR3_ARBORETUM   factory;
; 68   : 
; 69   :     // Allocate memory
; 70   :     //
; 71   :     factory	= (pANTLR3_ARBORETUM) ANTLR3_MALLOC((size_t)sizeof(ANTLR3_ARBORETUM));

  0001e	b9 78 01 00 00	 mov	 ecx, 376		; 00000178H
  00023	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00029	48 89 44 24 20	 mov	 QWORD PTR factory$[rsp], rax

; 72   :     if	(factory == NULL)

  0002e	48 83 7c 24 20
	00		 cmp	 QWORD PTR factory$[rsp], 0
  00034	75 07		 jne	 SHORT $LN2@antlr3Arbo

; 73   :     {
; 74   : 		return	NULL;

  00036	33 c0		 xor	 eax, eax
  00038	e9 e7 00 00 00	 jmp	 $LN1@antlr3Arbo
$LN2@antlr3Arbo:

; 75   :     }
; 76   : 
; 77   : 	// Install a vector factory to create, track and free() any child
; 78   : 	// node lists.
; 79   : 	//
; 80   : 	factory->vFactory					= antlr3VectorFactoryNew(0);

  0003d	33 c9		 xor	 ecx, ecx
  0003f	e8 00 00 00 00	 call	 antlr3VectorFactoryNew
  00044	48 8b 4c 24 20	 mov	 rcx, QWORD PTR factory$[rsp]
  00049	48 89 81 48 01
	00 00		 mov	 QWORD PTR [rcx+328], rax

; 81   : 	if	(factory->vFactory == NULL)

  00050	48 8b 44 24 20	 mov	 rax, QWORD PTR factory$[rsp]
  00055	48 83 b8 48 01
	00 00 00	 cmp	 QWORD PTR [rax+328], 0
  0005d	75 12		 jne	 SHORT $LN3@antlr3Arbo

; 82   : 	{
; 83   : 		free(factory);

  0005f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR factory$[rsp]
  00064	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 84   : 		return	NULL;

  0006a	33 c0		 xor	 eax, eax
  0006c	e9 b3 00 00 00	 jmp	 $LN1@antlr3Arbo
$LN3@antlr3Arbo:

; 85   : 	}
; 86   : 
; 87   :     // We also keep a reclaim stack, so that any Nil nodes that are
; 88   :     // orphaned are not just left in the pool but are reused, other wise
; 89   :     // we create 6 times as many nilNodes as ordinary nodes and use loads of
; 90   :     // memory. Perhaps at some point, the analysis phase will generate better
; 91   :     // code and we won't need to do this here.
; 92   :     //
; 93   :     factory->nilStack       =  antlr3StackNew(0);

  00071	33 c9		 xor	 ecx, ecx
  00073	e8 00 00 00 00	 call	 antlr3StackNew
  00078	48 8b 4c 24 20	 mov	 rcx, QWORD PTR factory$[rsp]
  0007d	48 89 81 50 01
	00 00		 mov	 QWORD PTR [rcx+336], rax

; 94   : 
; 95   :     // Install factory API
; 96   :     //
; 97   :     factory->newTree	    =  newPoolTree;

  00084	48 8b 44 24 20	 mov	 rax, QWORD PTR factory$[rsp]
  00089	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:newPoolTree
  00090	48 89 88 58 01
	00 00		 mov	 QWORD PTR [rax+344], rcx

; 98   :     factory->newFromTree    =  newFromTree;

  00097	48 8b 44 24 20	 mov	 rax, QWORD PTR factory$[rsp]
  0009c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:newFromTree
  000a3	48 89 88 60 01
	00 00		 mov	 QWORD PTR [rax+352], rcx

; 99   :     factory->newFromToken   =  newFromToken;

  000aa	48 8b 44 24 20	 mov	 rax, QWORD PTR factory$[rsp]
  000af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:newFromToken
  000b6	48 89 88 68 01
	00 00		 mov	 QWORD PTR [rax+360], rcx

; 100  :     factory->close			=  factoryClose;

  000bd	48 8b 44 24 20	 mov	 rax, QWORD PTR factory$[rsp]
  000c2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:factoryClose
  000c9	48 89 88 70 01
	00 00		 mov	 QWORD PTR [rax+368], rcx

; 101  : 
; 102  :     // Allocate the initial pool
; 103  :     //
; 104  :     factory->thisPool	= -1;

  000d0	48 8b 44 24 20	 mov	 rax, QWORD PTR factory$[rsp]
  000d5	c7 40 08 ff ff
	ff ff		 mov	 DWORD PTR [rax+8], -1

; 105  :     factory->pools		= NULL;

  000dc	48 8b 44 24 20	 mov	 rax, QWORD PTR factory$[rsp]
  000e1	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 106  :     newPool(factory);

  000e8	48 8b 4c 24 20	 mov	 rcx, QWORD PTR factory$[rsp]
  000ed	e8 00 00 00 00	 call	 newPool

; 107  : 
; 108  :     // Factory space is good, we now want to initialize our cheating token
; 109  :     // which one it is initialized is the model for all tokens we manufacture
; 110  :     //
; 111  :     antlr3SetCTAPI(&factory->unTruc);

  000f2	48 8b 44 24 20	 mov	 rax, QWORD PTR factory$[rsp]
  000f7	48 83 c0 10	 add	 rax, 16
  000fb	48 8b c8	 mov	 rcx, rax
  000fe	e8 00 00 00 00	 call	 antlr3SetCTAPI

; 112  : 
; 113  :     // Set some initial variables for future copying, including a string factory
; 114  :     // that we can use later for converting trees to strings.
; 115  :     //
; 116  : 	factory->unTruc.factory				= factory;

  00103	48 8b 44 24 20	 mov	 rax, QWORD PTR factory$[rsp]
  00108	48 8b 4c 24 20	 mov	 rcx, QWORD PTR factory$[rsp]
  0010d	48 89 48 40	 mov	 QWORD PTR [rax+64], rcx

; 117  :     factory->unTruc.baseTree.strFactory	= strFactory;

  00111	48 8b 44 24 20	 mov	 rax, QWORD PTR factory$[rsp]
  00116	48 8b 4c 24 40	 mov	 rcx, QWORD PTR strFactory$[rsp]
  0011b	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx

; 118  : 
; 119  :     return  factory;

  0011f	48 8b 44 24 20	 mov	 rax, QWORD PTR factory$[rsp]
$LN1@antlr3Arbo:

; 120  : 
; 121  : }

  00124	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00128	5f		 pop	 rdi
  00129	c3		 ret	 0
antlr3ArboretumNew ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\oss\third_party\antlr\libantlr3c-3.4\src\antlr3commontree.c
;	COMDAT antlr3CommonTreeNewFromToken
_TEXT	SEGMENT
newTree$ = 32
token$ = 64
antlr3CommonTreeNewFromToken PROC			; COMDAT

; 354  : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 0c 00 00 00	 mov	 ecx, 12
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 355  : 	pANTLR3_COMMON_TREE	newTree;
; 356  : 
; 357  : 	newTree = antlr3CommonTreeNew();

  0001e	e8 00 00 00 00	 call	 antlr3CommonTreeNew
  00023	48 89 44 24 20	 mov	 QWORD PTR newTree$[rsp], rax

; 358  : 
; 359  : 	if	(newTree == NULL)

  00028	48 83 7c 24 20
	00		 cmp	 QWORD PTR newTree$[rsp], 0
  0002e	75 04		 jne	 SHORT $LN2@antlr3Comm

; 360  : 	{
; 361  : 		return	NULL;

  00030	33 c0		 xor	 eax, eax
  00032	eb 13		 jmp	 SHORT $LN1@antlr3Comm
$LN2@antlr3Comm:

; 362  : 	}
; 363  : 
; 364  : 	//Pick up the payload we had in the supplied tree
; 365  : 	//
; 366  : 	newTree->token = token;

  00034	48 8b 44 24 20	 mov	 rax, QWORD PTR newTree$[rsp]
  00039	48 8b 4c 24 40	 mov	 rcx, QWORD PTR token$[rsp]
  0003e	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 367  : 	return newTree;

  00042	48 8b 44 24 20	 mov	 rax, QWORD PTR newTree$[rsp]
$LN1@antlr3Comm:

; 368  : }

  00047	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0004b	5f		 pop	 rdi
  0004c	c3		 ret	 0
antlr3CommonTreeNewFromToken ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\oss\third_party\antlr\libantlr3c-3.4\src\antlr3commontree.c
;	COMDAT antlr3CommonTreeNew
_TEXT	SEGMENT
tree$ = 32
antlr3CommonTreeNew PROC				; COMDAT

; 338  : {

$LN4:
  00000	40 57		 push	 rdi
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b fc	 mov	 rdi, rsp
  00009	b9 0c 00 00 00	 mov	 ecx, 12
  0000e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00013	f3 ab		 rep stosd

; 339  : 	pANTLR3_COMMON_TREE	tree;
; 340  : 	tree    = ANTLR3_CALLOC(1, sizeof(ANTLR3_COMMON_TREE));

  00015	ba 38 01 00 00	 mov	 edx, 312		; 00000138H
  0001a	b9 01 00 00 00	 mov	 ecx, 1
  0001f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_calloc
  00025	48 89 44 24 20	 mov	 QWORD PTR tree$[rsp], rax

; 341  : 
; 342  : 	if	(tree == NULL)

  0002a	48 83 7c 24 20
	00		 cmp	 QWORD PTR tree$[rsp], 0
  00030	75 04		 jne	 SHORT $LN2@antlr3Comm

; 343  : 	{
; 344  : 		return NULL;

  00032	33 c0		 xor	 eax, eax
  00034	eb 0f		 jmp	 SHORT $LN1@antlr3Comm
$LN2@antlr3Comm:

; 345  : 	}
; 346  : 
; 347  : 	antlr3SetCTAPI(tree);

  00036	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tree$[rsp]
  0003b	e8 00 00 00 00	 call	 antlr3SetCTAPI

; 348  : 
; 349  : 	return tree;

  00040	48 8b 44 24 20	 mov	 rax, QWORD PTR tree$[rsp]
$LN1@antlr3Comm:

; 350  : }

  00045	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00049	5f		 pop	 rdi
  0004a	c3		 ret	 0
antlr3CommonTreeNew ENDP
_TEXT	ENDS
END
